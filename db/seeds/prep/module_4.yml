name: 'Module 4: Intro to Programming'
slug: 'prep-mod-4-coding-101'
uuid: 57535d38-bcec-4c93-9771-2f83db80d8b2
activities: 
  -
    uuid: a2bbc279-3b58-4209-bc10-3baafe19e587
    name: 'Fundamentals of Programming'
    type: 'Reading'
    content_file_path: 'data/Prep Module 4 - Programming Fundamentals/00__Fundamentals of Programming__Module Outline.md'
    duration: 90
  -
    uuid: 42290567-ca46-4cb8-886f-095ec140b9b0
    name: 'Variables, Types and Operators'
    type: 'Assignment'
    content_file_path: 'data/Prep Module 4 - Programming Fundamentals/01__Variables, Types and Operators__Exercise.md'
    duration: 90
  -
    uuid: 656af239-0e82-463e-99bb-4c1da925d46c
    name: 'Code Reuse and Functions'
    type: 'Assignment'
    content_file_path: 'data/Prep Module 4 - Programming Fundamentals/02__Code Reuse and Functions__Exercise.md'
    duration: 90
  -
    uuid: d908fff2-95da-4727-b90f-2819d86b8b6d
    name: 'Functions - Age calculator'
    type: 'Assignment'
    content_file_path: 'data/Prep Module 4 - Programming Fundamentals/02b__Functions - age calculator__Problem.md'
    duration: 60
    evaluates_code: true
    activity_test_attributes: 
      test: |
        describe("ageCalculator", function() {
          it("exists as a function", function() {
            expect(ageCalculator).to.be.function;            
          });
          it("reports Suzie as 32 years old", function() {
            expect(ageCalculator("Suzie", 1984, 2016)).to.be.equal('Suzie is 32 years old.')
          });
          it("reports Jack as 12 years old", function() {
            expect(ageCalculator("Jack", 2004, 2016)).to.be.equal('Jack is 12 years old.')
          });
          it("reports Ali as 0 years old", function() {
            expect(ageCalculator("Ali", 2016, 2016)).to.be.equal('Ali is 0 years old.')
          });        
        });
  -
    uuid: b21257a6-aa67-4c32-8cc1-feb731a77f20
    name: 'Arrays'
    type: 'Assignment'
    content_file_path: 'data/Prep Module 4 - Programming Fundamentals/03__Arrays__Exercise.md'
    duration: 90
  -
    uuid: 002b194d-4037-41b7-a561-8ba1ec15b37a
    name: 'Arrays - Ice cream!'
    type: 'Assignment'
    content_file_path: 'data/Prep Module 4 - Programming Fundamentals/03b__Arrays - ice cream__Problem.md'
    duration: 60
    evaluates_code: true
    activity_test_attributes: 
      initial_code: |
        // Do not modify these first two lines
        var iceCreamFlavours = ["chocolate", "vanilla", "cookies and cream", "rocky road", "strawberry"];
        console.log(iceCreamFlavours);

        // Your code below here...
      test: |
        describe("The first console.log", function() {
          it("should be logging the original flavours", function() {
            var log = console.backlog[0];
            assert(Array.isArray(log), "No initial console.log found! Did you remove or modify line 3?");
            
            assert(log[1] === 'log', "Initial console statement is not a log, did you remove or modify line 3?");
            assert.deepEqual(log[2], ["chocolate", "vanilla", "cookies and cream", "rocky road", "strawberry"], "Original 5 flavours not found");
          });
          
        });

        describe("Step 1", function() {
          it("should be logging the original flavours along with root beer", function() {
            log = console.backlog[1];
            assert(Array.isArray(log), "No console.log found for step 1");
            
            assert(log[1] === 'log', "No console.log found for step 1");
            assert.deepEqual(log[2], ["chocolate", "vanilla", "cookies and cream", "rocky road", "strawberry", "root beer"], "6 flavours not found");
          });
        });

        describe("Step 2", function() {
          it("should be logging the first flavour, ie chocolate", function() {
            log = console.backlog[2];
            assert(Array.isArray(log), "No console.log found for step 2");
            
            assert(log[1] === 'log', "No console.log found for step 2");
            assert.deepEqual(log[2], "chocolate", "chocolate not found in log statement");
          });
        });

        describe("Step 3", function() {
          it("should be logging the last flavour, ie root beer", function() {
            log = console.backlog[3];
            assert(Array.isArray(log), "No console.log found for step 3");
            
            assert(log[1] === 'log', "No console.log found for step 3");
            assert.deepEqual(log[2], "root beer", "Original 5 flavours not found");
          });
        });
  -
    uuid: ba6a4409-2a1b-413e-836a-11f3d05fc814
    name: 'Conditional Execution'
    type: 'Assignment'
    content_file_path: 'data/Prep Module 4 - Programming Fundamentals/04__Conditional Execution__Exercise.md'
    duration: 90
  -
    uuid: 011bc098-b4a3-42e7-812e-e6bd2581964e
    name: 'Conditional Execution - whichSchool'
    type: 'Assignment'
    content_file_path: 'data/Prep Module 4 - Programming Fundamentals/04b__Conditional Execution - whichSchool__Problem.md'
    duration: 60
    evaluates_code: true
    activity_test_attributes: 
      initial_code: |
        function whichSchool(age) {
          // Your code in here ...
        }
      test: |
        describe("whichSchool", function() {
          it("For ages 13 to 18 returns Secondary School", function() {
            for (i = 13; i < 18; i++) {
              expect(whichSchool(i)).to.be.equal("Secondary School");
            }
          });
          it("For ages 19 to let's say 100 returns Lighthouse Labs", function() {
            for (i = 19; i < 100; i++) {
              expect(whichSchool(i)).to.be.equal("Lighthouse Labs");
            }
          });
          it("For ages 1 to 12 returns Elementary School", function() {
            for (i = 1; i < 12; i++) {
              expect(whichSchool(i)).to.be.equal("Elementary School");
            }
          });
        });
  -
    uuid: ce97e963-4bb4-45cf-978b-1fc123d66414
    name: 'JS Fundamentals - Quiz 1 of 2'
    type: 'QuizActivity'
    quiz: 
    content_repository: 
    duration: 30
  -
    uuid: 047921f7-6f94-42f4-a7e2-af53f4ed2e21
    name: 'Looping and Repetition'
    type: 'Assignment'
    content_file_path: 'data/Prep Module 4 - Programming Fundamentals/05__Looping and Repetition__Exercise.md'
    duration: 90
  -
    uuid: 38f1d2b7-514e-4e5d-b3ee-68d7e923c8c6
    name: 'Loopy Lighthouse'
    type: 'Assignment'
    content_file_path: 'data/Prep Module 4 - Programming Fundamentals/06__Loopy Lighthouse__Problem.md'
    duration: 180
  -
    uuid: 3692e1a5-c6ba-4eb8-969c-dfb9d99db3ec
    name: 'Objects and Functions'
    type: 'Assignment'
    content_file_path: 'data/Prep Module 4 - Programming Fundamentals/07__Objects and Functions__Exercise.md'
    duration: 180