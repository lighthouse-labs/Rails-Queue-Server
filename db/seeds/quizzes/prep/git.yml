name: 'Git and Source Control'
uuid: 2adb6811-a96f-40d7-a48e-9ed962c3032b
questions:

  -
    question: "What is a Staging Area?"
    uuid: b9af4376-3342-4255-b7a6-7edfc83ab92c
    outcome: c072534c-75db-45b4-8494-aacb5187cc4a
    options_attributes:
      -
        answer: "Where files are grouped together before committing."
        explanation: "Correct! Entering `git add filename.js` will add the specified file to the staging area, where it will wait until you are ready to commit, or you make further changes, removing it from the staging area."
        correct: true
      -
        answer: "Where committed files are stored before pushing."
        explanation: "Incorrect. Files are moved out of the staging area once they are committed."
        correct: false
      -
        answer: "Where files are stored after you pull them from a remote repository."
        explanation: "Incorrect. When pulling from a remote repo, the files will either be merged directly into your codebase, or staged for conflicts."
        correct: false
      -
        answer: "None of the above"
        explanation: "Incorrect"
        correct: false

  -
    question: "You have just finished working on your project for the day, and want to upload your recently changed `myAwesomeApp.js` to github. Which command would you enter?"
    uuid: f50e4d50-2238-45f3-b294-2d3073995908
    outcome: 2cc214c5-7604-489d-a331-7d8d2e043806
    options_attributes:
      -
        answer: |
          ```terminal
          git push all files
          ```
        explanation: "Incorrect. This is not a valid git command."
        correct: false
      -
        answer: |
          ```terminal
          git add myAwesomeApp.js
          git commit -m "added last_name column to the User table"
          git push
          ```
        explanation: "Correct! You first added your files to the staging area, then committed the staged file with a descriptive commit message before pushing."
        correct: true
      -
        answer: |
          ```terminal
          git commit -am "updated database files"
          git push
          ```
        explanation: "Correct! The `-am` argument is a shorthand way to add *all* changed files, and then immediately commit them with your descriptive commit message. Be careful with this though, you may accidentally commit files you didn't intend to commit!"
        correct: true
      -
        answer: "None of these answers are correct"
        explanation: "Some of them are actually"
        correct: false
      -
        answer: |
          ```terminal
          git add myAwesomeApp.js
          git commit -m "added last_name column to the User table"
          ```
        explanation: "Almost! It's missing the last step which is to `git push` the changes to the remote repository on github"
        correct: false

  -
    question: "You've accidentally added `mySecretPasswords.js` to the staging area! You definitely don't want that file uploaded to GitHub for the world to see. Luckily you haven't committed yet. What is the correct command to remove those files from staging?"
    uuid: 0242c179-f923-49ed-b195-b98b7dc23f43
    outcome: 9015cd3c-71eb-4e6c-8b0b-31374e1b67fb
    options_attributes:
      -
        answer: |
          ```terminal
          git reset
          ```
        explanation: "Incorrect. Although `git reset` would remove `secretPasswords.js` from staging, it would also remove all other files you've added!"
        correct: false
      -
        answer: |
          ```terminal
          git remove secretPasswords.js
          ```
        explanation: "Incorrect. Remove is not a valid git command."
        correct: false
      -
        answer: |
          ```terminal
          git reset secretPasswords.js
          ```
        explanation: "Correct! `git reset` with a filename will remove that file from the staging area."
        correct: true
      -
        answer: |
          ```terminal
          git pull secretPasswords.js
          ```
        explanation: "Incorrect. While `git pull` is a valid command, it will try and download any remote changes from the remote repository. It also doesn't take a file name as an argument."
        correct: false

  -
    question: "What is the difference between GitHub and Git?"
    uuid: 80d0af54-5eb9-4ffd-8075-f5703a7ce2bf
    outcome: b78cce52-e7c4-4c31-89c4-c56a8001ce65
    options_attributes:
      -
        answer: "Git is the source control tool and GitHub is the company that created and maintains it"
        explanation: "Incorrect. GitHub didn't create Git, but has created an entire business around Git. It provides hosting of and social features for Git"
        correct: false
      -
        answer: "Git is short for GitHub"
        explanation: "Incorrect. They are two very different things"
        correct: false
      -
        answer: "GitHub is a web company that provides hosting and additional social and collaboration features for Git, the version control software"
        explanation: "Nailed it! GitHub came much later, and fun fact: It's web application is built with Ruby on Rails"
        correct: true
      -
        answer: "Git is a web company that provides hosting and additional social and collaboration features for GitHub, the version control software"
        explanation: "Incorrect! It's actually the reverse"
        correct: false
      -
        answer: "None of the options are correct"
        explanation: "Incorrect. One of them is!"
        correct: false

  -
    question: "What is the `.git` folder in our repository?"
    uuid: d9617453-6336-4395-a02f-7a41201846a0
    outcome: 1542d5ee-d49d-4b3c-97fd-81d023183ce9
    options_attributes:
      -
        answer: "It's a hidden folder managed by Git via its `git` commands"
        explanation: "Correct, but the other answers are also correct."
        correct: false
      -
        answer: "We don't typically need to or should have to modify its contents directly"
        explanation: "Correct, but the other answers are also correct."
        correct: false
      -
        answer: "It contains the entire history and all details of the files in the repository"
        explanation: "Correct, but the other answers are also correct."
        correct: false
      -
        answer: "There is only one of these in each git repository, at the root (top most) directory for that repository"
        explanation: "Correct, but the other answers are also correct."
        correct: false
      -
        answer: "All of the options are true"
        explanation: "Every repository has a `.git` hidden folder which is the full database of every commit from its inception as well as other important objects"
        correct: true

  -
    question: "Which is the most popular Version Control (aka Source Control) Software these days?"
    uuid: 2adb6811-a96f-40d7-a48e-9ed962c3032b
    outcome: 62b21723-2bfe-449f-9472-02e8e717c119
    options_attributes:
      -
        answer: "Subversion"
        explanation: "A popular choice still, Subversion is a bit dated and doesn't offer the distributed and performance benefits compared to Git"
        correct: false
      -
        answer: "Microsoft Team Foundation Server"
        explanation: "A popular choice in the Microsoft ecosystem, but very minimal if any adoption in the Linux/Unix ecosystem"
        explanation: "How'd you know? ;)"
        correct: true
      -
        answer: "Mercurial"
        explanation: "Incorrect. Though it is a solid contender to Git, and very similar in its nature"
        correct: false
      -
        answer: "GitHub"
        explanation: "Incorrect. GitHub is a web application, not a source control tool"
        correct: false
