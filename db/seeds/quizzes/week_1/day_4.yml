name: "JavaScript Scope, Callbacks, and Modules"
uuid: 1c878c8e-b3f0-4485-809f-935ab31d7f2a
questions:
  -
    question: "What does the term Callback Hell refer to?"
    uuid: 0943f9e6-1431-4fd3-a27e-f4ffb1b40001
    options_attributes: 
      - 
        answer: "The general difficulty of dealing with asynchronous callback functions"
        explanation: "Incorrect, callbacks might seem evil at first, but you'll learn to love them"
        correct: false
      - 
        answer: "When data is lost to an endless loop of callback functions"
        explanation: "Incorrect, that "
        correct: false
      - 
        answer: "Having too many nested callbacks, leading to messy-looking code that is hard to follow"
        explanation: "Correct, callback hell is best avoided by structuring code so that it's easy to follow"
        correct: true
  -
    question: "What purpose does a callback function serve?"
    uuid: 41379d6d-deef-4f0b-a0b0-06b4d348c6cf
    options_attributes: 
      - 
        answer: "A way to define a function without giving it a specific name"
        explanation: "Incorrect, although _anonymous_ callback functions have no name, their purpose deals with events"
        correct: false
      - 
        answer: "To handle the result of an asynchronous event"
        explanation: "Correct, callback functions are invoked when a certain event occurs"
        correct: true
      - 
        answer: ""
        explanation: ""
        correct: false
  -
    question: "Which variables are accessible in Lexical Scope?"
    uuid: 2f4aa61b-d4dc-4528-a43a-161bbdd2e04f
    options_attributes: 
      - 
        answer: "A function can access variables defined in nested / child functions"
        explanation: "Incorrect,"
        correct: false
      - 
        answer: "A function can access its parent-function's variables"
        explanation: "Correct, a function can access its parent's variables"
        correct: true
      - 
        answer: "A function has access only to the variables defined within its own scope"
        explanation: "Incorrect, lexical scope allows access to variables outside of the function being executed"
        correct: false
  -
    question: "What key property of lexical scope allows for Function Closures in JavaScript?"
    uuid: d64532ad-17d0-4ad0-8d29-1fca8b196d14
    options_attributes: 
      - 
        answer: "Accessing variables before they are defined in the global scope via hoisting"
        explanation: "Incorrect, all functions have access to the global scope, not specifically closures"
        correct: false
      - 
        answer: "A function closure has access to its parents' variables after the parent function has _returned_"
        explanation: "Correct, lexical scoping means that the variables are not deallocated and therefore accessible after the parent function finishes executing"
        correct: true
      - 
        answer: ""
        explanation: ""
        correct: false
  -
    question: "Considering the following code, which variable makes this a closure?
```javascript
function makeAdder(x) {
  return function(y) {
    return x + y;
  };
}
var z = makeAdder(3)(4);
```
"
    uuid: ac779410-7070-4d70-b8d3-2bb67feb813c
    options_attributes: 
      - 
        answer: "Variable `x`"
        explanation: "Correct, the inner (anonymous) function has access to argument `x` via lexical scoping"
        correct: true
      - 
        answer: "Variable `y`"
        explanation: "Incorrect, `y` is the argument to the inner (anonymous) function"
        correct: false
      - 
        answer: "Variable `z`"
        explanation: "Incorrect, `z` is the return value of the closure"
        correct: false
      - 
        answer: "The code does not contain a function closure"
        explanation: "Incorrect, the inner (anonymous) function has access to the outer function's scope"
        correct: false
  -
    question: "In programming, what is meant by the term **First-class citizen** (or First-class object)?"
    uuid: 1db52d9f-492e-4784-a879-3c376caa8886
    options_attributes: 
      - 
        answer: "A variable that has higher level of scope than normal objects"
        explanation: "Incorrect, scope is the same for first-class objects"
        correct: false
      - 
        answer: "An object twith no restrictions on its creation, destruction, or usage."
        explanation: "Correct, this includes the ability to be passed as an argument, returned from a function, and assigned to a variable"
        correct: true
      - 
        answer: ""
        explanation: ""
        correct: false
  -
    question: "To which directory does NPM install dependencies?"
    uuid: b100626a-3cc2-427d-abd1-63e69fa55a3a
    options_attributes: 
      - 
        answer: "`./node_dependencies`"
        explanation: "Incorrect, this is not the directory that NPM uses to manage dependency code"
        correct: false
      - 
        answer: "`./dependencies`"
        explanation: "Incorrect, this is not the directory that NPM uses to manage dependency code"
        correct: false
      - 
        answer: "`./node_modules`"
        explanation: "Correct, each dependency has its own subdirectory in the `node_modules` directory"
        correct: true
      
  -
    question: "What is a side-effect of lexigraphical sorting in JavaScript?"
    uuid: 43d93d57-d445-4a32-97c6-6abc14bb2d27
    options_attributes: 
      - 
        answer: "Numbers are sorted in alphabetical order (1, 10, 2, 3, ...)"
        explanation: "Correct, lexigraphical sorting converts values to strings before sorting"
        correct: true
      - 
        answer: "Values always sort in descending order (10, ..., 3, 2, 1)"
        explanation: "Incorrect, default sort-order is ascending"
        correct: false
      - 
        answer: ""
        explanation: ""
        correct: false
  -
    question: "Considering the following JavaScript code, is it possible to assign attributes to a function?
```javascript
var funObject = function() {
  console.log(\"I am function.\");
}
funObject.someAttribute = 42;
```
"
    uuid: b986b9be-bcff-41c0-aa6f-0ab04de480c3
    options_attributes: 
      - 
        answer: "It wouldn't cause errors, but the attribute is lost"
        explanation: "Incorrect, there is no reason to drop the attribute after assignment"
        correct: false
      - 
        answer: "It is possible since functions are first-class objects"
        explanation: "Correct, functions can be assigned attributes like any other object"
        correct: true
      - 
        answer: "It is invalid JavaScript and would cause errors"
        explanation: "Incorrect, it is valid JavaScript"
        correct: false
  -
    question: "What is meant by callback functions being _asynchronous_?"
    uuid: f98b67a5-b102-4215-9783-5368cd6eb227
    options_attributes: 
      - 
        answer: "We cannot be sure which order they'll be invoked"
        explanation: "Incorrect"
        correct: false
      - 
        answer: ""
        explanation: ""
        correct: false
      - 
        answer: "The asynchronous function does not block the execution thread"
        explanation: "Correct, the program can continue execution before invoking the callback"
        correct: true
