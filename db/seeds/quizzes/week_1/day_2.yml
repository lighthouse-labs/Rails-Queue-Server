name: "Functions, Variables, and Debugging in JavaScript"
uuid: 7f0a4e0e-0121-4c36-9016-ff4ea9eca366
questions:
  -
    question: "The functions `createUser`, or `sendUserData` are examples of which naming convention?"
    uuid: 14f8eb7b-8fd3-452a-9804-591d6a074c3a
    options_attributes: 
      - 
        answer: "Snake case"
        explanation: "Incorrect, snake case looks like `create_user` or `send_user_data`"
        correct: false
      - 
        answer: "Camel case"
        explanation: "Correct, this is an example of _lower_ camel case"
        correct: true
      - 
        answer: "Quirky quarky"
        explanation: "Incorrect, there's such convention. Perhaps you were feeling lucky or just curious."
        correct: false
      - 
        answer: "Hungarian notation"
        explanation: "Incorrect, Hungarian notation prefixes the variable type as a code (`szName`, or `fnsendUserData`)"
        correct: false
  -
    question: "What is **variable hoisting** in JavaScript?"
    uuid: e5864969-1f54-475a-b0ad-8616eed977aa
    options_attributes: 
      - 
        answer: "The ability to use a variable outside the block it was defined in"
        explanation: "Incorrect, this would be bad practice (although possible, depending on _how_ the variable is declared)"
        correct: false
      - 
        answer: "Variables are effectively declared at the top of the function"
        explanation: "Correct, the JavaScript interpreter _looks ahead_ to find all the variable declarations and _hoists_ them to the top of the function"
        correct: true
      - 
        answer: "Variables do not need an explicit declaration using `var`"
        explanation: "Incorrect, although most JavaScript interpreters would understand it, this is not _hoisting_"
        correct: false
  -
    question: "What would be the console output for `Original name` given the following code?
```javascript
var name = 'Baggins';

(function () {
    console.log('Original name was ' + name);
    var name = 'Underhill';
    console.log('New name is ' + name);
})();
```
(Note: the notation `(function() {})()` defines a self-executing function)
    "
    uuid: 5f2dbd12-bd9c-40b8-82b8-5c2f4cd81d96
    options_attributes: 
      - 
        answer: "Baggins"
        explanation: "Incorrect, it variable hoisting leads this to be otherwise"
        correct: false
      - 
        answer: "Underhill"
        explanation: "Incorrect, variable hoisting does not initialize a value"
        correct: false
      - 
        answer: "undefined"
        explanation: "Correct, variable hoisting would re-declare a variable `name` at the top of the function"
        correct: true
      - 
        answer: "ReferenceError"
        explanation: "Incorrect, hoisting would cause the variable to be defined at the top of the function"
        correct: false
  -
    question: "What would be the `console` output for the following code?
```javascript
console.log(declaredLater);
var declaredLater = 'declared!';
console.log(declaredLater);
```    
"
    uuid: 11789f59-515a-492f-8612-ef8547ff5ec3
    options_attributes: 
      - 
        answer: "`undefined`, `declared!`"
        explanation: "Correct, due to variable hoisting, it would behave like the declaration was at the beginning"
        correct: true
      - 
        answer: "`ReferenceError`"
        explanation: "Incorrect, variable hoisting in JavaScript would avoid a ReferenceError"
        correct: false
      - 
        answer: "`declared!`, `declared!`"
        explanation: "Incorrect, the code executes procedurally and therefore the variable is not assigned an initial value"
        correct: false
  -
    question: "What is meant by type coercion?"
    uuid: 2000f8b6-e36d-44e7-8e11-1897faf27e1e
    options_attributes: 
      - 
        answer: "When all primitive data types are treated equally"
        explanation: "Incorrect, data types are not 'treated equally', however _coerced_ in some situations"
        correct: false
      - 
        answer: "When the operands of an operator are different types, one of them will be converted to an _equivalent_ value of the other operand's type"
        explanation: "Correct, an example is the comparison operator `==` in JavaScript"
        correct: true
      - 
        answer: "When variables of different data types cannot be compared with one another"
        explanation: "Incorrect, JavaScript's `==` operator automatically coerces variables of different types"
        correct: false
  -
    question: "What would the following JavaScript code evaluate to? Why?
```javascript
'0' == false
```    
"
    uuid: b71ce32d-9737-471b-919e-0cb8c706ffea
    options_attributes: 
      - 
        answer: "`true`"
        explanation: "Correct, `'0'` and `false` would be coerced to a common type and evaluate to be equal (or `true`)"
        correct: true
      - 
        answer: "`false`"
        explanation: "Incorrect, the types would be coerced"
        correct: false
      - 
        answer: "TypeError"
        explanation: "Incorrect, type coercion would avoid an error in this situation"
        correct: false
  -
    question: "Would the following JavaScript code evaluate to true or false? Why?
```javascript
'1' === 1
```
"
    uuid: 697d8e0c-f0c2-4c65-b03e-96314b0aefce
    options_attributes: 
      - 
        answer: "`false` because the variable _types_ are different"
        explanation: ""
        correct: true
      - 
        answer: "`true` because types are coerced automatically"
        explanation: "Incorrect, the `===` compares the values _and_ types of the operands"
        correct: false
      - 
        answer: "`true` because types are not compared in this situation"
        explanation: "Incorrect, the `===` compares the values _and_ types of the operands"
        correct: false
  -
    question: ""
    uuid: 83dbbabd-71f5-489b-94a1-9aa5382940c5
    options_attributes: 
      - 
        answer: ""
        explanation: ""
        correct: false
      - 
        answer: ""
        explanation: ""
        correct: true
      - 
        answer: ""
        explanation: ""
        correct: false
  -
    question: ""
    uuid: 7e2f070d-5e99-48e5-9713-c90ddf7ca20f
    options_attributes: 
      - 
        answer: ""
        explanation: ""
        correct: false
      - 
        answer: ""
        explanation: ""
        correct: true
      - 
        answer: ""
        explanation: ""
        correct: false
  -
    question: ""
    uuid: 6fe87724-5673-4d53-86e0-c3b439ac52c7
    options_attributes: 
      - 
        answer: ""
        explanation: ""
        correct: false
      - 
        answer: ""
        explanation: ""
        correct: true
      - 
        answer: ""
        explanation: ""
        correct: false
      
